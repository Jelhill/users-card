{"version":3,"sources":["images/ter-stergen.jpg","images/semedo.jpg","images/pique.jpg","images/busquets.jpg","images/vidal.jpg","images/de-jong.jpg","images/messi.jpg","images/suarez.jpg","images/dembele.jpg","images/griezman.jpg","Components/Cards.js","Components/CardPack.js","Components/Search.js","Data/Data.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Cards","data","players","counter","map","eachData","i","id","key","src","image","alt","className","name","username","email","address","street","zipcode","phone","CardPack","filteredName","Search","onSearch","type","onChange","require","App","event","setState","searchField","target","value","state","fetching","entries","fetch","response","json","this","filter","user","toLowerCase","includes","Fragment","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f03f636.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/ter-stergen.5cf3cd45.jpg\";","module.exports = __webpack_public_path__ + \"static/media/semedo.e7b2494d.jpg\";","module.exports = __webpack_public_path__ + \"static/media/pique.8e6a9251.jpg\";","module.exports = __webpack_public_path__ + \"static/media/busquets.ecebe1c5.jpg\";","module.exports = __webpack_public_path__ + \"static/media/vidal.d83f1d7c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/de-jong.e3bc00ea.jpg\";","module.exports = __webpack_public_path__ + \"static/media/messi.ee3cf1dd.jpg\";","module.exports = __webpack_public_path__ + \"static/media/suarez.d909db9f.jpg\";","module.exports = __webpack_public_path__ + \"static/media/dembele.9004328c.jpg\";","module.exports = __webpack_public_path__ + \"static/media/griezman.b4e32970.jpg\";","import React from 'react';\r\n\r\nconst Cards = ({data, players}) => {   \r\n\r\n    let counter = 0; \r\n    data = data.map((eachData, i) => {    \r\n\r\n        return (\r\n            <div id=\"card-container\" key={i}>                \r\n                <div id=\"cards-div\">           \r\n                    <img src={players[counter].image} alt=\"footballar\" />                    \r\n                    <h2 className=\"tc\">{eachData.name}</h2>\r\n                    <h4 className=\"tc\">{eachData.username}</h4>\r\n                    <p className=\"tc\">{eachData.email}</p>\r\n                    <p className=\"tc\">{eachData.address.street}</p>\r\n                    <p className=\"tc\">{eachData.address.zipcode}</p>\r\n                    <p className=\"tc\">{eachData.phone} {counter ++}</p>                    \r\n                </div>                \r\n            </div>                \r\n          )\r\n    })\r\n\r\n    return data\r\n}\r\n\r\nexport default Cards\r\n","import React, { Fragment } from 'react';\r\nimport Cards from \"../Components/Cards\"\r\n\r\n\r\nconst CardPack = ({data, players, filteredName}) => {       \r\n        return (\r\n            <Fragment>\r\n                <Cards data={data} players={players} filteredName={filteredName}/>\r\n            </Fragment>\r\n            \r\n          )\r\n}\r\n\r\n\r\nexport default CardPack\r\n","import React from 'react'\r\n\r\nconst Search = ({onSearch}) => {\r\n    \r\n        return (\r\n            <div>\r\n                <input type=\"search\" id=\"searchInput\" onChange={onSearch}/>\r\n            </div>\r\n        )\r\n\r\n}\r\n\r\nexport default Search"," \r\nexport const players = [\r\n    {\r\n        image: require(\"../images/ter-stergen.jpg\") \r\n    },\r\n    {\r\n        image: require(\"../images/semedo.jpg\")\r\n    },\r\n    {\r\n        image: require(\"../images/pique.jpg\") \r\n        \r\n    },\r\n    {\r\n        image: require(\"../images/busquets.jpg\") \r\n    },\r\n    {\r\n        image: require(\"../images/vidal.jpg\")\r\n    },\r\n    {\r\n        image: require(\"../images/de-jong.jpg\") \r\n        \r\n    },\r\n    {\r\n        image: require(\"../images/messi.jpg\") \r\n    },\r\n    {\r\n        image: require(\"../images/suarez.jpg\")\r\n    },\r\n    {\r\n        image: require(\"../images/dembele.jpg\") \r\n        \r\n    },\r\n    {\r\n        image: require(\"../images/griezman.jpg\") \r\n        \r\n    }\r\n]","import React, { Component } from 'react'\nimport CardPack from \"./Components/CardPack\"\nimport Search from \"./Components/Search\"\nimport {players} from './Data/Data'\nimport './App.css';\n\n\nexport default class App extends Component {\n\n    constructor() {\n      super();\n      this.state = {\n        fetching: true,\n        entries: [],\n        players: players,\n        searchField: \"\",\n      }\n    }\n\n    async componentDidMount() {\n      const apiUrl = 'https://jsonplaceholder.typicode.com/users';\n      const response = await fetch(apiUrl)\n      const data = await response.json();\n\n      this.setState({\n        entries: [...this.state.entries, ...data]\n      })\n\n    }\n\n    onSearch = (event) => {\n      this.setState({searchField: event.target.value})\n    }\n\n    \n\n  render() {\n   const filteredName = this.state.entries.filter((user) => {\n     return user.name.toLowerCase().includes(this.state.searchField)\n   })\n\n    return (\n      <React.Fragment>\n        <h3>{this.state.fetching ? \"Fetching ...\" : \"Success\"}</h3>\n        <Search onSearch={this.onSearch}/>\n        <CardPack data={filteredName} players={this.state.players} />\n      </React.Fragment>\n    )\n  }\n}\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}